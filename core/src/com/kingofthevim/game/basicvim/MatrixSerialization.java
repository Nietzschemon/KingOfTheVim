package com.kingofthevim.game.basicvim;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.utils.Json;
import com.kingofthevim.game.basicvim.Matrix.Cell;
import com.kingofthevim.game.basicvim.VimObject.VimObject;

import java.util.ArrayList;

public class MatrixSerialization {

    private VimObject vimObject;
    private static String fileName = "levels/builder/LevelBuilder_0.txt";
    private static int counter;
    private Json json;
    private Save save;

    public MatrixSerialization(VimObject vimObject){

        this.vimObject = vimObject;
        json = new Json();
        save = new Save();
        json.setUsePrototypes(false);
    }


    /**
     * Save object the data json uses to save and
     * load levels and objects with
     */
    private static class Save {


        private ArrayList<ArrayList<Properties>> savedMatrix;
        private int cursorRow;
        private int cursorColumn;

        Save(){
            savedMatrix = new ArrayList<>();
        }


        /**
         * Copies the current state of the vim matrix
         *
         * @param vimObject object used to copy with
         */
        void copyCurrentMatrix(VimObject vimObject){
            ArrayList<ArrayList<Cell>> cellMatrix = vimObject.getVimMatrix().getCellMatrix();

            for (int i = 0; i < cellMatrix.size(); i++) {

                savedMatrix.add(i, new ArrayList<>());

                for (int j = 0; j < cellMatrix.get(i).size(); j++) {
                    Cell column = cellMatrix.get(i).get(j);

                    savedMatrix.get(i).add(column.getCellProperties());

                }
            }
        }


        /**
         * Copies the chosen object
         *
         * @param vimObject object to copy
         */
        void copyObjectPosition(VimObject vimObject){
            cursorRow = vimObject.getPosition().getCurrRow();
            cursorColumn = vimObject.getPosition().getCurrColumn();

        }
    }

    /**
     * Saves all on screen in file with
     * an autogenerated name
     */
    public void saveAll( ){

        while (Gdx.files.local(fileName).exists()){
            fileName = "levels/builder/LevelBuilder_" + counter++ + ".txt";
        }

        saveAll(fileName);
    }


    /**
     * Saves all on screen in file with
     * an user-generated name
     */
    public void saveAll(String filePath){
        save.copyCurrentMatrix(vimObject);
        save.copyObjectPosition(vimObject);

        FileHandle file = Gdx.files.local(filePath);
        json.toJson(save,  file);
    }


    /**
     * Saves a specific object
     *
     * @param filePath name of file to save to
     */
    private void saveObj(String filePath){
        save.copyObjectPosition(vimObject);

        FileHandle file = Gdx.files.local(filePath);
        json.toJson(save,  file);
    }


    /**
     * Loads the latest save
     *
     */
    public void loadAll( ){
        loadAll(fileName);
    }


    /**
     * Loads a specific save
     *
     * @param filePath name of file to load from
     */
    public void loadAll(String filePath){
        Save save = loadSave(filePath);
        loadMatrix(save);
        loadObject(save);
    }


    /**
     * Loads Save class from file
     *
     * @param filePath name of file to load from
     * @return a Save object
     */
    private Save loadSave(String filePath){
        FileHandle file = Gdx.files.local(filePath);
        return json.fromJson(Save.class, file);
    }


    /**
     * Loads level matrix into static grid
     *
     * @param save to load from
     */
    private void loadMatrix(Save save){

        ArrayList<ArrayList<Cell>> cellMatrix = vimObject.getVimMatrix().getCellMatrix();

        ArrayList<ArrayList<Properties>> propList = save.savedMatrix;

        for (int i = 0; i < cellMatrix.size(); i++) {

            for (int j = 0; j < cellMatrix.get(i).size(); j++) {

                vimObject.getVimMatrix().getCellMatrix().get(i).get(j).setCellProperties(propList.get(i).get(j));

            }
        }

    }


    /**
     * loads object into grid
     *
     * @param save to load from
     */
    private void loadObject(Save save){
        vimObject.getPosition().setAbsoluteColumn(save.cursorColumn);
        vimObject.getPosition().setAbsoluteRow(save.cursorRow);
    }

}
